üí∞ Sistema Banc√°rio em Python
Este √© um projeto de um Sistema Banc√°rio Simples desenvolvido em Python com foco em orienta√ß√£o a objetos, princ√≠pios de design limpo e reutiliza√ß√£o de c√≥digo. O sistema permite o gerenciamento de clientes, cria√ß√£o de contas correntes, al√©m de possibilitar opera√ß√µes como dep√≥sitos, saques e emiss√£o de extrato.

üß© Funcionalidades
Cadastro de clientes (Pessoa F√≠sica)

Cria√ß√£o de contas correntes

Dep√≥sitos com valida√ß√£o de valor

Saques com:

Valida√ß√£o de saldo

Limite m√°ximo por saque

Limite di√°rio de saques

Emiss√£o de extrato com hist√≥rico de transa√ß√µes

Navega√ß√£o via menu interativo no terminal

üìå Regras de Neg√≥cio
O cliente pode ter m√∫ltiplas contas.

O saque est√° limitado a R$500 por transa√ß√£o.

S√£o permitidos at√© 3 saques por dia.

Todas as transa√ß√µes s√£o registradas com data, tipo e valor.

üõ†Ô∏è Tecnologias Utilizadas
Python 3

Programa√ß√£o Orientada a Objetos (POO)

Biblioteca padr√£o (datetime, abc)


O c√≥digo est√° organizado em:

Classes (Cliente, Conta, Transa√ß√µes)

Fun√ß√µes auxiliares

Menu interativo


Este projeto demonstra conceitos importantes de programa√ß√£o como:

Heran√ßa e classes abstratas

Encapsulamento

Reutiliza√ß√£o de c√≥digo com composi√ß√£o

Boas pr√°ticas com separa√ß√£o de responsabilidades



from abc import ABC, abstractmethod
from datetime import datetime

# ========================
# Fun√ß√µes auxiliares
# ========================
def excedeu_saldo(conta, valor):
    return valor > conta.saldo

def excedeu_limite(conta, valor):
    return valor > conta.limite

def numero_saques(conta):
    hoje = datetime.now().date()
    saques_hoje = [
        t for t in conta.historico.transacoes
        if t["tipo"] == "Saque" and datetime.strptime(t["data"], "%Y-%m-%d %H:%M:%S").date() == hoje
    ]
    return len(saques_hoje)

# ========================
# Classes base
# ========================
class Transacao(ABC):
    @abstractmethod
    def registrar(self, conta):
        pass

class Historico:
    def __init__(self):
        self.transacoes = []

    def adicionar(self, transacao):
        self.transacoes.append({
            "tipo": transacao.__class__.__name__,
            "valor": getattr(transacao, "valor", 0),
            "data": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        })

# ========================
# Cliente
# ========================
class Cliente:
    def __init__(self, endereco):
        self.endereco = endereco
        self.contas = []

    def realizar_transacao(self, conta, transacao):
        transacao.registrar(conta)

    def adicionar_conta(self, conta):
        self.contas.append(conta)

class PessoaFisica(Cliente):
    def __init__(self, nome, data_nascimento, cpf, endereco):
        super().__init__(endereco)
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.cpf = cpf

# ========================
# Conta e Conta Corrente
# ========================
class Conta:
    def __init__(self, numero, cliente):
        self._saldo = 0
        self._numero = numero
        self._agencia = '0029'
        self._cliente = cliente
        self._historico = Historico()

    @classmethod
    def nova_conta(cls, cliente, numero):
        return cls(numero, cliente)

    @property
    def saldo(self):
        return self._saldo

    @property
    def numero(self):
        return self._numero

    @property
    def agencia(self):
        return self._agencia

    @property
    def historico(self):
        return self._historico

class ContaCorrente(Conta):
    def __init__(self, numero, cliente, limite=500, limite_saques=3):
        super().__init__(numero, cliente)
        self.limite = limite
        self.limite_saques = limite_saques

    def __str__(self):
        return f"Ag√™ncia: {self.agencia} | Conta: {self.numero} | Saldo: R${self.saldo:.2f}"

# ========================
# Transa√ß√µes
# ========================
class Deposito(Transacao):
    def __init__(self, valor):
        self.valor = valor

    def registrar(self, conta):
        if self.valor <= 0:
            print("Valor de dep√≥sito inv√°lido. Deve ser maior que zero.")
            return
        conta._saldo += self.valor
        conta.historico.adicionar(self)
        print(f"Dep√≥sito de R${self.valor:.2f} realizado com sucesso.")

class Saque(Transacao):
    def __init__(self, valor):
        self.valor = valor

    def registrar(self, conta):
        if self.valor <= 0:
            print("Valor de saque inv√°lido.")
            return
        if excedeu_saldo(conta, self.valor):
            print("Saldo insuficiente.")
        elif excedeu_limite(conta, self.valor):
            print("Valor do saque excede o limite permitido.")
        elif numero_saques(conta) >= conta.limite_saques:
            print("N√∫mero m√°ximo de saques di√°rios atingido.")
        else:
            conta._saldo -= self.valor
            conta.historico.adicionar(self)
            print(f"Saque de R${self.valor:.2f} realizado com sucesso.")

# ========================
# Sistema
# ========================
clientes = []
contas = []

def menu():
    print("\n=== Sistema Banc√°rio ===")
    print('1 - Criar novo cliente e conta')
    print('2 - Acessar conta existente')
    print('3 - Listar clientes')
    print('q - Sair')

def conta_menu():
    print("\n=== Menu da Conta ===")
    print('d - Depositar')
    print('s - Sacar')
    print('e - Ver extrato')
    print('v - Voltar ao menu principal')

def criar_cliente_conta():
    nome = input("Nome: ")
    nascimento = input("Data de nascimento (AAAA-MM-DD): ")
    cpf = input("CPF: ")
    endereco = input("Endere√ßo: ")
    cliente = PessoaFisica(nome, nascimento, cpf, endereco)
    numero_conta = f"{len(contas)+1:04}"
    conta = ContaCorrente.nova_conta(cliente, numero_conta)
    cliente.adicionar_conta(conta)
    clientes.append(cliente)
    contas.append(conta)
    print(f"Cliente {nome} e conta {numero_conta} criados com sucesso.")

def selecionar_conta():
    if not contas:
        print("Nenhuma conta dispon√≠vel.")
        return None, None

    print("\nContas dispon√≠veis:")
    for i, conta in enumerate(contas):
        print(f"{i+1} - {conta._cliente.nome} | Conta: {conta.numero}")

    try:
        escolha = int(input("Escolha o n√∫mero da conta: ")) - 1
        if 0 <= escolha < len(contas):
            return contas[escolha]._cliente, contas[escolha]
        else:
            print("Escolha inv√°lida.")
    except ValueError:
        print("Entrada inv√°lida. Digite um n√∫mero v√°lido.")

    return None, None

# ========================
# Loop principal
# ========================
while True:
    menu()
    opcao = input("Escolha uma op√ß√£o: ")

    if opcao == '1':
        criar_cliente_conta()

    elif opcao == '2':
        cliente, conta = selecionar_conta()
        if conta:
            while True:
                conta_menu()
                acao = input("Escolha uma opera√ß√£o: ")

                if acao == 'd':
                    try:
                        valor = float(input("Valor do dep√≥sito: R$"))
                        cliente.realizar_transacao(conta, Deposito(valor))
                    except ValueError:
                        print("Entrada inv√°lida. Digite um valor num√©rico.")

                elif acao == 's':
                    try:
                        valor = float(input("Valor do saque: R$"))
                        cliente.realizar_transacao(conta, Saque(valor))
                    except ValueError:
                        print("Entrada inv√°lida. Digite um valor num√©rico.")

                elif acao == 'e':
                    print("\n=== Extrato ===")
                    if not conta.historico.transacoes:
                        print("Nenhuma movimenta√ß√£o.")
                    else:
                        for t in conta.historico.transacoes:
                            print(f"{t['data']} - {t['tipo']}: R${t['valor']:.2f}")
                    print(f"Saldo atual: R${conta.saldo:.2f}")

                elif acao == 'v':
                    break

                else:
                    print("Op√ß√£o inv√°lida.")

    elif opcao == '3':
        if not clientes:
            print("Nenhum cliente cadastrado.")
        else:
            print("\n=== Lista de Clientes ===")
            for c in clientes:
                print(f"{c.nome} | CPF: {c.cpf}")

    elif opcao == 'q':
        print("Saindo... Obrigado por usar o sistema banc√°rio!")
        break

    else:
        print("Op√ß√£o inv√°lida.")
